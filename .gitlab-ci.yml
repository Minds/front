image: minds/ci-front:14

stages:
  - test and build
  - prepare
  - review
  - deploy:staging
  - qa
  - deploy:canary
  - deploy:production
  - cleanup

variables:
  CYPRESS_INSTALL_BINARY: "0" # Speeds up the install process
  npm_config_cache: '$CI_PROJECT_DIR/.npm'
  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/Cypress'
  FF_USE_FASTZIP: "1"

cache:
  key:
    files:
      - package.json
    prefix: ${CI_JOB_NAME}
  paths:
    - node_modules/

test:
  image: circleci/node:14-browsers
  stage: test and build
  script:
    - sudo npm install -g npm@7
    - npm i
    - NODE_OPTIONS=--max_old_space_size=4096
    - npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI

lint:
  stage: test and build
  script:
    - npm i -g prettier@"^1.19.1"
    - prettier --check "src/**/*.ts"
    - prettier --check "src/**/*.scss"
    - prettier --check "src/**/*.html"

############
# QA Stage #
############
.cypress_tests: &cypress_tests
  image: cypress/browsers:node14.17.0-chrome88-ff89
  stage: qa
  variables:
    CYPRESS_INSTALL_BINARY: "7.4.0"
  script:
    - >
      if [ "$CI_BUILD_REF_NAME" == "master" ]; then
        export E2E_DOMAIN=https://www.minds.com
        export PRODUCTION=true
      else
        export E2E_DOMAIN=https://$CI_BUILD_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
        export PRODUCTION=false
      fi
    - export CYPRESS_baseUrl=$E2E_DOMAIN
    - echo "Preparing E2E tests for $CI_BUILD_REF_NAME running against $E2E_DOMAIN with user $CYPRESS_username"
    - git clone --branch=master https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/minds/cypress-tests.git
    - echo "Checking if branch exists..."
    - BRANCH_EXISTS=$(git ls-remote --heads https://www.gitlab.com/minds/cypress-tests $CI_BUILD_REF_NAME | wc -l)
    - cd ./cypress-tests
    - if [ $BRANCH_EXISTS == "1" ] ; then
    -    echo "Matching branch exists, checking out $CI_BUILD_REF_NAME..." 
    -    git checkout $CI_BUILD_REF_NAME 2>/dev/null
    - fi;
    - npm i
    - echo "Running Cypress"
    - >
      ./node_modules/.bin/cypress run --browser chrome
      --parallel
      --record
      --ci-build-id $CI_PIPELINE_ID
      --group "minds-e2e"
      --key $CYPRESS_RECORD_ID
      --config baseUrl=$E2E_DOMAIN
      --env captcha_bypass_key=$CYPRESS_bypass_key,production=$PRODUCTION,captcha_shared_key=$CYPRESS_shared_key
  artifacts:
    when: always
    paths:
      - cypress/screenshots
      - cypress/videos
  cache:
    paths:
      - .npm
      - cache/Cypress

qa:sandbox:
  parallel: 2
  allow_failure: false
  except:
    - /^master$/
    - feat/1732-block-refactor
  <<: *cypress_tests

# qa:production:
#   parallel: 1
#   allow_failure: true
#   only:
#     - /^master$/
#   <<: *cypress_tests

# qa:manual:
#   stage: qa
#   script:
#     - echo "Manually approved"
#   when: manual
#   only:
#     refs:
#       - master
#       - production
#       - test/gitlab-ci
#   allow_failure: false

###############
# Build Stage #
###############

build:review:
  stage: test and build
  before_script:
    - sed -ri "s|'VERSION'|'$CI_PIPELINE_ID'|" src/environments/environment.prod.ts
  script:
    - npm i && npm install -g gulp-cli
    - npm run postinstall
    - sh build/ng-bundles.sh
    - sh build/ng-remove-locale-assets.sh # Remove assets from locales
  artifacts:
    name: '$CI_COMMIT_REF_SLUG'
    paths:
      - dist
  except:
    refs:
      - master
      - production
      - test/gitlab-ci
      - feat/1732-block-refactor
  tags:
    - angular

build:production:bundles:
  stage: test and build
  before_script:
    - sed -ri "s|'VERSION'|'$CI_PIPELINE_ID'|" src/environments/environment.prod.ts
  script:
    - npm i && npm install -g gulp-cli
    - npm run postinstall
    - sh build/ng-bundles.sh
    - sh build/ng-remove-locale-assets.sh # Remove assets from locales
  artifacts:
    name: '$CI_COMMIT_REF_SLUG'
    paths:
      - dist/browser
      - dist/server
      - dist/embed
  only:
    refs:
      - master
      - production
      - test/gitlab-ci
      - feat/1732-block-refactor
  tags:
    - angular

#################
# Prepare Stage #
#################

.sentry_prepare: &sentry_prepare
  stage: prepare
  image: getsentry/sentry-cli
  script:
    - echo "Create a new release $CI_PIPELINE_ID"
    - sentry-cli releases new $CI_PIPELINE_ID
    - sentry-cli releases set-commits --auto $CI_PIPELINE_ID
    - sentry-cli releases files $CI_PIPELINE_ID upload-sourcemaps $CI_PROJECT_DIR/dist/browser -x .js -x .map --validate --url-prefix $SOURCEMAP_PREFIX
    - sentry-cli releases finalize $CI_PIPELINE_ID
    - echo "Finalized release for $CI_PIPELINE_ID"

prepare:review:
  stage: prepare
  image: minds/ci:latest
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker build -t $CI_REGISTRY_IMAGE/server:$CI_PIPELINE_ID -f containers/server/Dockerfile dist/.
    - docker push $CI_REGISTRY_IMAGE/server:$CI_PIPELINE_ID
  dependencies:
    - build:review
  except:
    refs:
      - master
      - production
      - test/gitlab-ci
      - feat/1732-block-refactor

prepare:review:sentry:
  <<: *sentry_prepare
  variables:
    SOURCEMAP_PREFIX: '~/browser'
  except:
    refs:
      - master
      - production
      - test/gitlab-ci
      - feat/1732-block-refactor
  dependencies:
    - build:review

prepare:production:
  stage: prepare
  image: minds/ci:latest
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker build -t $CI_REGISTRY_IMAGE/server:$CI_PIPELINE_ID -f containers/server/Dockerfile dist/.
    - docker push $CI_REGISTRY_IMAGE/server:$CI_PIPELINE_ID
    - docker tag $CI_REGISTRY_IMAGE/server:$CI_PIPELINE_ID $CI_REGISTRY_IMAGE/server:latest
    - docker push $CI_REGISTRY_IMAGE/server:latest
  only:
    refs:
      - master
      - production
      - test/gitlab-ci
      - feat/1732-block-refactor
  dependencies:
    - build:production:bundles

prepare:production:sentry:
  <<: *sentry_prepare
  variables:
    SOURCEMAP_PREFIX: '~/front/dist/browser'
  only:
    refs:
      - master
      - production
      - test/gitlab-ci
      - feat/1732-block-refactor
  dependencies:
    - build:production:bundles

################
# Review Stage #
################

.cleanup_review: &cleanup_review
  image: minds/aws-helm:latest
  script:
    - aws eks update-kubeconfig --name=sandbox
    - helm del $CI_BUILD_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_BUILD_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    action: stop
  variables:
    GIT_STRATEGY: none
  except:
    refs:
      - master
      - production
      - test/gitlab-ci
      - feat/1732-block-refactor

review:start:
  stage: review
  image: minds/aws-helm:latest
  script:
    - aws eks update-kubeconfig --name=sandbox
    - git clone --branch=master https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/minds/helm-charts.git
    - "helm upgrade \
      --install \
      --reuse-values \
      --set front.image.repository=$CI_REGISTRY_IMAGE/server \
      --set-string front.image.tag=$CI_PIPELINE_ID \
      --set domain=$CI_BUILD_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
      --set cdn_domain=$CI_BUILD_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
      --set siteUrl=https://$CI_BUILD_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN/
      --wait \
      $CI_BUILD_REF_SLUG \
      ./helm-charts/minds"
    # Update sentry
    - sentry-cli releases deploys $CI_PIPELINE_ID new -e review-$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_BUILD_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    on_stop: review:stop
  except:
    refs:
      - master
      - production
      - test/gitlab-ci
      - feat/1732-block-refactor

review:stop:
  <<: *cleanup_review
  stage: review
  when: manual

################
# Deploy Stage #
################

.deploy: &deploy
  image: minds/ci:latest
  services:
    - docker:dind
  script:
    ## Sync assets with CDN
    - aws s3 sync dist $S3_REPOSITORY_URL --cache-control max-age=31536000
    - $(aws ecr get-login --no-include-email --region us-east-1)
    ## Update docker server container
    - docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}
    - docker pull $CI_REGISTRY_IMAGE/server:$CI_PIPELINE_ID
    - docker tag $CI_REGISTRY_IMAGE/server:$CI_PIPELINE_ID $CI_REGISTRY_IMAGE/server:$IMAGE_LABEL
    - docker push $CI_REGISTRY_IMAGE/server:$IMAGE_LABEL
    # Update EKS role
    - aws eks --region us-east-1 update-kubeconfig --name $AWS_EKS_CLUSTER_NAME --role-arn=$AWS_IAM_ROLE_ARN
    # Update the image tags
    - kubectl rollout restart deployment minds-front-$IMAGE_LABEL
    ## Update sentry
    - sentry-cli releases deploys $CI_PIPELINE_ID new -e $IMAGE_LABEL
  dependencies:
    - build:production:bundles

staging:fpm:
  <<: *deploy
  stage: deploy:staging
  variables:
    IMAGE_LABEL: 'staging'
  environment:
    name: staging
    url: https://www.minds.com # requires staging cookie
  only:
    refs:
      - master

deploy:canary:
  <<: *deploy
  stage: deploy:canary
  variables:
    IMAGE_LABEL: 'canary'
  environment:
    name: canary
    url: https://www.minds.com/?canary=1 # requires canary cookie
  when: manual
  allow_failure: true
  only:
    refs:
      - master

deploy:production:
  <<: *deploy
  stage: deploy:production
  variables:
    IMAGE_LABEL: 'production'
  environment:
    name: production
    url: https://www.minds.com
  when: manual
  only:
    refs:
      - master
      - test/gitlab-ci

#################
# Cleanup stage #
#################

cleanup:review: # We stop the review site after the e2e tests have run
  <<: *cleanup_review
  stage: cleanup
  when: manual
  except:
    refs:
      - master
