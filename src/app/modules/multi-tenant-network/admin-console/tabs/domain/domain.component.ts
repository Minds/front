import { Component, Injector, OnDestroy, OnInit } from '@angular/core';
import { BehaviorSubject, Subscription, map } from 'rxjs';
import { MultiTenantDomainService } from '../../../services/domain.service';
import { ModalService } from '../../../../../services/ux/modal.service';
import { NetworkAdminConsoleSetNetworkModalComponent } from './set-network-modal/set-network-modal.component';
import { MultiTenantDomainStatus } from './domain.types';

/**
 * Domain settings tab for network admin console.
 */
@Component({
  selector: 'm-networkAdminConsole__domain',
  templateUrl: './domain.component.html',
  styleUrls: [
    './domain.component.ng.scss',
    '../../stylesheets/console.component.ng.scss',
  ],
})
export class NetworkAdminConsoleDomainComponent implements OnInit, OnDestroy {
  protected readonly isAutogenerated$ = this.service.status$.pipe(
    map(status => {
      return status === MultiTenantDomainStatus.AUTOGENERATED;
    })
  );

  protected readonly isActive$ = this.service.status$.pipe(
    map(status => {
      return status === MultiTenantDomainStatus.ACTIVE;
    })
  );

  protected readonly isPending$ = this.service.status$.pipe(
    map(status => {
      return status === MultiTenantDomainStatus.PENDING;
    })
  );

  protected readonly isFailed$ = this.service.status$.pipe(
    map(status => {
      return status === MultiTenantDomainStatus.FAILED;
    })
  );

  // subscriptions.
  private subscriptions: Subscription[] = [];

  constructor(
    protected service: MultiTenantDomainService,
    private modalService: ModalService,
    private injector: Injector
  ) {}

  ngOnInit(): void {
    this.service.fetchDomain();
  }

  ngOnDestroy(): void {
    // ojm remove?
    for (let subscription of this.subscriptions) {
      subscription.unsubscribe();
    }
  }

  /**
   * Open the modal to set the domain
   */
  async openSetupModal() {
    // ojm todo
    this.modalService.present(NetworkAdminConsoleSetNetworkModalComponent, {
      // ojm add domain
      injector: this.injector,
    });
  }
}
